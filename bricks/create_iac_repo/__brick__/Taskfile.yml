# https://taskfile.dev

version: '3'

dotenv: ['.env', '.env.private']

silent: true

vars:
  {{applicationName.upperCase()}}_VM_NAME_SANDBOX: {{hostname}}s
  {{applicationName.upperCase()}}_VM_FQDN_SANDBOX: {{hostname}}s.vm.cas.kvnbw.net
  VAULT_MOUNT_PATH_SANDBOX: cas/vms/mgm/sbox/

  {{applicationName.upperCase()}}_VM_NAME_LABOR: {{hostname}}l
  {{applicationName.upperCase()}}_VM_FQDN_LABOR: {{hostname}}l.vm.cas.kvnbw.net
  VAULT_MOUNT_PATH_LABOR: cas/vms/mgm/labor/

  {{applicationName.upperCase()}}_VM_NAME_PROD: {{hostname}}p
  {{applicationName.upperCase()}}_VM_FQDN_PROD: {{hostname}}p.vm.cas.kvnbw.net
  VAULT_MOUNT_PATH_PROD: cas/vms/mgm/prod/

includes:
  libs:
    taskfile: .taskfile/Included.yml
    flatten: true
    internal: true

tasks:
  default:
    desc: "Print var's"
    cmds:
      - echo ""
      - echo "Environment:"
      - echo "  VAULT_ADDR - $VAULT_ADDR"
      - echo "  VAULT_TOKEN - $VAULT_TOKEN"
      - echo "  VAULT_SKIP_VERIFY - $VAULT_SKIP_VERIFY"
      - echo ""
      - echo "  TF_VAR_vault_provider_token - $TF_VAR_vault_provider_token"
      - echo ""
      - echo "Variables:"
      - echo "  {{applicationName.upperCase()}}_VM_NAME_SANDBOX - {{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_NAME_SANDBOX{{=<% %>=}}}}<%={{ }}=%>"
      - echo "  {{applicationName.upperCase()}}_VM_FQDN_SANDBOX - {{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_FQDN_SANDBOX{{=<% %>=}}}}<%={{ }}=%>"
      - echo "  VAULT_MOUNT_PATH_SANDBOX - {{=<% %>=}}{{.VAULT_MOUNT_PATH_SANDBOX}}<%={{ }}=%>"
      - echo ""
      - echo "  {{applicationName.upperCase()}}_VM_NAME_LABOR - {{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_NAME_LABOR{{=<% %>=}}}}<%={{ }}=%>"
      - echo "  {{applicationName.upperCase()}}_VM_FQDN_LABOR - {{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_FQDN_LABOR{{=<% %>=}}}}<%={{ }}=%>"
      - echo "  VAULT_MOUNT_PATH_LABOR - {{=<% %>=}}{{.VAULT_MOUNT_PATH_LABOR}}<%={{ }}=%>"
      - echo ""
      - echo "  {{applicationName.upperCase()}}_VM_NAME_PROD - {{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_NAME_PROD{{=<% %>=}}}}<%={{ }}=%>"
      - echo "  {{applicationName.upperCase()}}_VM_FQDN_PROD - {{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_FQDN_PROD{{=<% %>=}}}}<%={{ }}=%>"
      - echo "  VAULT_MOUNT_PATH_PROD - {{=<% %>=}}{{.VAULT_MOUNT_PATH_PROD}}<%={{ }}=%>"

  install:deps:
    desc: "Install python and ansible dependencies"
    cmds:
      - pip install -r requirements.txt
      - cd 2-ansible && ansible-galaxy install -r requirements.yml --force

  # ===============
  # === SANDBOX ===
  # ===============
  {{applicationName}}:install:sbox:
    desc: "Install {{applicationName}} in the Sandbox Environment"
    cmds:
      - task: terraform:init
        vars:
          STAGE: sbox
      - task: terraform:plan
        vars:
          STAGE: sbox
      - task: terraform:apply
        vars:
          STAGE: sbox

      - task: vault:get:private_key
        vars:
          VM_NAME: '{{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_NAME_SANDBOX{{=<% %>=}}}}<%={{ }}=%>'
          VM_FQDN: '{{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_FQDN_SANDBOX{{=<% %>=}}}}<%={{ }}=%>'
          MOUNT_PATH: '{{=<% %>=}}{{.VAULT_MOUNT_PATH_SANDBOX}}<%={{ }}=%>'

      - task: ansible:inventory:print
        vars:
          STAGE: sbox

      - task: ansible:test:connectivity
        vars:
          HOST: '{{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_FQDN_SANDBOX{{=<% %>=}}}}<%={{ }}=%>'
          STAGE: sbox

      - task: ansible:playbook:site
        vars:
          STAGE: sbox

  {{applicationName}}:uninstall:sbox:
    desc: "Uninstall {{applicationName}} in the Sandbox Environment"
    cmds:
      - task: terraform:destroy
        vars:
            STAGE: sbox

  {{applicationName}}:reinstall:sbox:
    desc: "Re-Install {{applicationName}} in the Sandbox Environment"
    cmds:
      - task: {{applicationName}}:uninstall:sbox
      - task: {{applicationName}}:install:sbox
    silent: true

  {{applicationName}}:connect:sbox:
    desc: "Connect to the Sandbox VM via SSH"
    cmds:
      - task: ssh:connect
        vars:
          VM_FQDN: '{{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_FQDN_SANDBOX{{=<% %>=}}}}<%={{ }}=%>'
          KEY: './ssh/{{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_NAME_SANDBOX{{=<% %>=}}}}<%={{ }}=%>_ansible_ed25519'

  # =============
  # === LABOR ===
  # =============
  {{applicationName}}:install:labor:
    desc: "Install {{applicationName}} in the Labor Environment"
    cmds:
      - task: terraform:init
        vars:
          STAGE: labor
      - task: terraform:plan
        vars:
          STAGE: labor
      - task: terraform:apply
        vars:
          STAGE: labor

      - task: vault:get:private_key
        vars:
          VM_NAME: '{{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_NAME_LABOR{{=<% %>=}}}}<%={{ }}=%>'
          VM_FQDN: '{{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_FQDN_LABOR{{=<% %>=}}}}<%={{ }}=%>'
          MOUNT_PATH: '{{=<% %>=}}{{.VAULT_MOUNT_PATH_LABOR}}<%={{ }}=%>'

      - task: ansible:inventory:print
        vars:
          STAGE: labor

      - task: ssh:test:connectivity
        vars:
          VM_FQDN: '{{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_FQDN_LABOR{{=<% %>=}}}}<%={{ }}=%>'
          KEY: ./ssh/{{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_NAME_LABOR{{=<% %>=}}}}<%={{ }}=%>_ansible_ed25519

      - task: ansible:test:connectivity
        vars:
          HOST: '{{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_FQDN_LABOR{{=<% %>=}}}}<%={{ }}=%>'
          STAGE: labor

      - task: ansible:playbook:site
        vars:
          STAGE: labor

  {{applicationName}}:uninstall:labor:
    desc: "Uninstall {{applicationName}} in the Labor Environment"
    cmds:
      - task: terraform:destroy
        vars:
            STAGE: labor

  {{applicationName}}:reinstall:labor:
    desc: "Re-Install {{applicationName}} in the Labor Environment"
    cmds:
      - task: {{applicationName}}:uninstall:labor
      - task: {{applicationName}}:install:labor
    silent: true

  {{applicationName}}:connect:labor:
    desc: "Connect to the Labor VM via SSH"
    cmds:
      - task: ssh:connect
        vars:
          VM_FQDN: '{{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_FQDN_LABOR{{=<% %>=}}}}<%={{ }}=%>'
          KEY: './ssh/{{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_NAME_LABOR{{=<% %>=}}}}<%={{ }}=%>_ansible_ed25519'

  # ============
  # === PROD ===
  # ============
  {{applicationName}}:install:prod:
    desc: "Install {{applicationName}} in the Prod Environment"
    cmds:
      - task: terraform:init
        vars:
          STAGE: prod
      - task: terraform:plan
        vars:
          STAGE: prod
      - task: terraform:apply
        vars:
          STAGE: prod

      - task: vault:get:private_key
        vars:
          VM_NAME: '{{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_NAME_PROD{{=<% %>=}}}}<%={{ }}=%>'
          VM_FQDN: '{{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_FQDN_PROD{{=<% %>=}}}}<%={{ }}=%>'
          MOUNT_PATH: '{{=<% %>=}}{{.VAULT_MOUNT_PATH_PROD}}<%={{ }}=%>'

      - task: ansible:inventory:print
        vars:
          STAGE: prod

      - task: ansible:test:connectivity
        vars:
          HOST: '{{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_FQDN_PROD{{=<% %>=}}}}<%={{ }}=%>'
          STAGE: prod

      - task: ansible:playbook:site
        vars:
          STAGE: prod

  {{applicationName}}:uninstall:prod:
    desc: "Uninstall {{applicationName}} in the Prod Environment"
    cmds:
      - task: terraform:destroy
        vars:
            STAGE: prod

  {{applicationName}}:reinstall:prod:
    desc: "Re-Install {{applicationName}} in the Prod Environment"
    cmds:
      - task: {{applicationName}}:uninstall:prod
      - task: {{applicationName}}:install:prod
    silent: true

  {{applicationName}}:connect:prod:
    desc: "Connect to the Prod VM via SSH"
    cmds:
      - task: ssh:connect
        vars:
          VM_FQDN: '{{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_FQDN_PROD{{=<% %>=}}}}<%={{ }}=%>'
          KEY: './ssh/{{=<% %>=}}{{<%={{ }}=%>.{{applicationName.upperCase()}}_VM_NAME_PROD{{=<% %>=}}}}<%={{ }}=%>_ansible_ed25519'

