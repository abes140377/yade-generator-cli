version: 3

silent: true
{{=<% %>=}}
tasks:
  default:
    cmds:
      - echo "TODO: Implement the cluster_create task"

  # # =================
  # # === TERRAFORM ===
  # # =================
  # terraform:init:
  #   desc: "Initialize terraform"
  #   dir: '{{.USER_WORKING_DIR}}/1-terraform/environment/{{.STAGE}}'
  #   cmds:
  #     - echo ""
  #     - echo "ðŸš€ terraform:init [ STAGE - {{.STAGE}} ]"
  #     - pwd
  #     - terraform init -upgrade
  #   requires:
  #     vars: [STAGE]

  # terraform:plan:
  #   desc: "Initialize terraform"
  #   dir: '{{.USER_WORKING_DIR}}/1-terraform/environment/{{.STAGE}}'
  #   cmds:
  #     - echo ""
  #     - echo "ðŸš€ terraform:plan [ STAGE - {{.STAGE}} ]"
  #     - pwd
  #     - terraform plan
  #   requires:
  #     vars: [STAGE]

  # terraform:apply:
  #   desc: "Initialize terraform"
  #   dir: '{{.USER_WORKING_DIR}}/1-terraform/environment/{{.STAGE}}'
  #   cmds:
  #     - echo ""
  #     - echo "ðŸš€ terraform:apply [ STAGE - {{.STAGE}} ]"
  #     - pwd
  #     - terraform apply -auto-approve
  #   requires:
  #     vars: [STAGE]

  # terraform:destroy:
  #   desc: "Destroy terraform"
  #   dir: '{{.USER_WORKING_DIR}}/1-terraform/environment/{{.STAGE}}'
  #   cmds:
  #     - echo ""
  #     - echo "ðŸš€ terraform:destroy [ STAGE - {{.STAGE}} ]"
  #     - pwd
  #     - terraform destroy -auto-approve
  #   requires:
  #     vars: [STAGE]

  # # ===========
  # # === SSH ===
  # # ===========
  # ssh:test:connectivity:
  #   desc: "Test SSH Connectivity to a VM"
  #   dir: '{{.USER_WORKING_DIR}}'
  #   vars:
  #     USERNAME: '{{default "ansible" .USERNAME}}'
  #     PORT: '{{default "22022" .PORT}}'
  #   cmds:
  #     - echo ""
  #     - echo "ðŸš€ ssh:test:connectivity [ VM_FQDN - {{.VM_FQDN}}, KEY - {{.KEY}}, USERNAME - {{.USERNAME}}, PORT - {{.PORT}} ]"
  #     - pwd
  #     - ssh -o StrictHostKeyChecking=no -p {{.PORT}} -i {{.KEY}} {{.USERNAME}}@{{.VM_FQDN}} "date"
  #   requires:
  #     vars: [VM_FQDN, KEY]

  # ssh:connect:
  #   desc: "Connect to a VM via SSH"
  #   dir: '{{.USER_WORKING_DIR}}'
  #   vars:
  #     USERNAME: '{{default "ansible" .USERNAME}}'
  #     PORT: '{{default "22022" .PORT}}'
  #   cmds:
  #     - echo ""
  #     - echo "ðŸš€ ssh:connect [ VM_FQDN - {{.VM_FQDN}}, KEY - {{.KEY}}, USERNAME - {{.USERNAME}}, PORT - {{.PORT}} ]"
  #     - pwd
  #     - ssh -o StrictHostKeyChecking=no -p {{.PORT}} -i {{.KEY}} {{.USERNAME}}@{{.VM_FQDN}}
  #   requires:
  #     vars: [VM_FQDN, KEY]

  # # =============
  # # === VAULT ===
  # # =============
  # vault:get:private_key:
  #   desc: "Read private key for a VM from vault and store it in the root directory to be used by ansible"
  #   dir: '{{.USER_WORKING_DIR}}'
  #   vars:
  #     PORT: '{{default "22022" .PORT}}'
  #   cmds:
  #     - echo ""
  #     - echo "ðŸš€ vault:get:private_key [ VM_NAME - {{.VM_NAME}}, VM_FQDN - {{.VM_FQDN}}, MOUNT_PATH - {{.MOUNT_PATH}}, PORT - {{.PORT}} ]"
  #     - pwd
  #     # create ssh directory
  #     - mkdir -p ./ssh
  #     # download from vault
  #     - vault kv get -field=openssh_private -mount={{.MOUNT_PATH}} {{.VM_NAME}}/ssh_ansible > ./ssh/{{.VM_NAME}}_ansible_ed25519
  #     # make executable
  #     - chmod 600 ./ssh/{{.VM_NAME}}_ansible_ed25519
  #     # remove from known_hosts
  #     - ssh-keygen -f "{{.HOME}}/.ssh/known_hosts" -R "[{{.VM_FQDN}}]:{{.PORT}}"
  #   requires:
  #     vars: [VM_NAME, VM_FQDN, MOUNT_PATH]

  # # ===============
  # # === ANSIBLE ===
  # # ===============
  # ansible:test:connectivity:
  #   dir: '{{.USER_WORKING_DIR}}/2-ansible'
  #   cmds:
  #     - echo ""
  #     - echo "ðŸš€ ansible:test:connectivity [ STAGE - {{.STAGE}} ]"
  #     - pwd
  #     - ansible -i inventory/hosts_{{.STAGE}}.yml -m ping all
  #   requires:
  #     vars: [STAGE]

  # ansible:inventory:print:
  #   dir: '{{.USER_WORKING_DIR}}/2-ansible'
  #   cmds:
  #     - echo ""
  #     - echo "ðŸš€ ansible:inventory:print [ STAGE - {{.STAGE}} ]"
  #     - pwd
  #     - ansible-inventory -i inventory/hosts_{{.STAGE}}.yml --graph --vars
  #   requires:
  #     vars: [STAGE]

  # ansible:playbook:site:
  #   dir: '{{.USER_WORKING_DIR}}/2-ansible'
  #   vars:
  #     PLAYBOOK: '{{default "site.yml" .PLAYBOOK}}'
  #   cmds:
  #     - echo ""
  #     - echo "ðŸš€ ansible:playbook:site [ STAGE - {{.STAGE}}, PLAYBOOK - {{.PLAYBOOK}} ]"
  #     - pwd
  #     - ansible-playbook -i inventory/hosts_{{.STAGE}}.yml {{.PLAYBOOK}}
  #   requires:
  #     vars: [STAGE]

  # ansible:playbook:site:vars:
  #   dir: '{{.USER_WORKING_DIR}}/2-ansible'
  #   vars:
  #     PLAYBOOK: '{{default "site.yml" .PLAYBOOK}}'
  #   cmds:
  #     - echo ""
  #     - echo "ðŸš€ ansible:playbook:site [ STAGE - {{.STAGE}}, PLAYBOOK - {{.PLAYBOOK}}, VARIABLES - {{.VARIABLES}} ]"
  #     - pwd
  #     - ansible-playbook -i inventory/hosts_{{.STAGE}}.yml {{.PLAYBOOK}} -e "{{ .VARIABLES }}"
  #   requires:
  #     vars: [STAGE, VARIABLES]

  # # ==============
  # # === PYTHON ===
  # # ==============
  # pyvenv:create:venv:
  #   desc: "Create Python Virtual Environment required for a repository to install deps locally"
  #   cmds:
  #     - python3 -m venv .venv

<%={{ }}=%>