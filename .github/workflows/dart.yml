# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Dart

#on:
#  push:
#    branches: [ "develop" ]
#  pull_request:
#    branches: [ "develop" ]

on:
  push:
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1
      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603

      - name: Activate mason CLI
        run: dart pub global activate mason_cli

      - name: Install CLI dependencies
        working-directory: ./packages/yade_cli
        run: dart pub get

      - name: Install BRICK dependencies
        working-directory: ./bricks/create_iac_repo/hooks
        run: dart pub get

      - name: Bundle mason templates
        run: >
          mason bundle \
            -s path ./bricks/create_iac_repo \
            -t dart \
            -o packages/yade_cli/lib/src/commands/create/templates

      - name: Dart run build_runner build
        working-directory: ./packages/yade_cli
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Create build directory
        run: mkdir -p build

      - name: Compile YADE CLI
        working-directory: ./packages/yade_cli
        run: dart compile exe bin/yade.dart -o ../../build/yade

      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: "0.1.0"
          # release_name: ${{ steps.version.outputs.version }}
          tag_name: ${{ github.ref }}
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload linux artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/yade
          asset_name: yade
          asset_content_type: application/x-binary

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

#      # Consider passing '--fatal-infos' for slightly stricter analysis.
#      - name: Analyze project source
#        run: dart analyze
#
#      # Your project will need to have tests in test/ and a dependency on
#      # package:test for this step to succeed. Note that Flutter projects will
#      # want to change this to 'flutter test'.
#      - name: Run tests
#        run: dart test
